basePath: /
definitions:
  delivery.CartItem:
    properties:
      price:
        type: number
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  delivery.CartResponse:
    properties:
      id:
        type: string
      items:
        items:
          $ref: '#/definitions/delivery.CartItem'
        type: array
      status:
        type: string
      user_id:
        type: string
    type: object
  delivery.CreateCartItemRequest:
    properties:
      cart_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  delivery.CreateOfficeRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      phone_number:
        type: string
    type: object
  delivery.CreateOrderRequest:
    properties:
      address:
        type: string
      client_id:
        type: string
      delivery_date:
        type: string
      order_date:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      status:
        type: string
    type: object
  delivery.CreateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        type: integer
    type: object
  delivery.DeleteOfficeRequest:
    properties:
      office_id:
        type: string
    type: object
  delivery.DeleteOrderRequest:
    properties:
      order_id:
        type: string
    type: object
  delivery.DeleteProductRequest:
    properties:
      product_id:
        type: string
    type: object
  delivery.GetAllOfficesResponse:
    properties:
      offices:
        items:
          $ref: '#/definitions/delivery.OfficeResponse'
        type: array
      total_count:
        type: integer
    type: object
  delivery.GetAllOrdersResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/delivery.OrderResponse'
        type: array
      total_count:
        type: integer
    type: object
  delivery.GetOrderByClientResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/delivery.OrderResponse'
        type: array
      total_count:
        type: integer
    type: object
  delivery.GetProductsResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/delivery.ProductResponse'
        type: array
      total_count:
        type: integer
    type: object
  delivery.InfoResponse:
    properties:
      message:
        type: string
      success:
        type: boolean
    type: object
  delivery.OfficeResponse:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      office_id:
        type: string
      phone_number:
        type: string
    type: object
  delivery.OrderResponse:
    properties:
      address:
        type: string
      client_id:
        type: string
      delivery_date:
        type: string
      order_date:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      status:
        type: string
    type: object
  delivery.ProductResponse:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      stock:
        type: integer
    type: object
  delivery.UpdateCartItemQuantityRequest:
    properties:
      cart_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
    type: object
  delivery.UpdateCartRequest:
    properties:
      id:
        type: string
      status:
        type: string
      user_id:
        type: string
    type: object
  delivery.UpdateOfficeRequest:
    properties:
      address:
        type: string
      email:
        type: string
      name:
        type: string
      office_id:
        type: string
      phone_number:
        type: string
    type: object
  delivery.UpdateOrderRequest:
    properties:
      address:
        type: string
      delivery_date:
        type: string
      order_id:
        type: string
      product_id:
        type: string
      quantity:
        type: integer
      status:
        type: string
    type: object
  delivery.UpdateProductRequest:
    properties:
      category:
        type: string
      description:
        type: string
      name:
        type: string
      price:
        type: number
      product_id:
        type: string
      stock:
        type: integer
    type: object
info:
  contact: {}
  description: Voting service
  title: Voting service
  version: "1.0"
paths:
  /cart/create-cart:
    post:
      consumes:
      - application/json
      description: Creates a new cart for a user and returns the cart details.
      produces:
      - application/json
      responses:
        "200":
          description: Cart created successfully
          schema:
            $ref: '#/definitions/delivery.CartResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Create a new cart
      tags:
      - Cart
  /cart/create-cart-item:
    post:
      consumes:
      - application/json
      description: Adds an item to the specified cart based on the provided details.
      parameters:
      - description: Cart item creation request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.CreateCartItemRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Item added to cart successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Add a new item to a cart
      tags:
      - Cart
  /cart/delete-cart:
    delete:
      consumes:
      - application/json
      description: Deletes an existing cart based on the provided cart ID.
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart deleted successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Delete a cart by ID
      tags:
      - Cart
  /cart/delete-cart-item:
    delete:
      consumes:
      - application/json
      description: Deletes a specific item from a cart based on the provided cart
        ID and product ID.
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart item deleted successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Delete a cart item
      tags:
      - Cart
  /cart/get-cart:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a cart based on the provided cart ID.
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            $ref: '#/definitions/delivery.CartResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get a cart by ID
      tags:
      - Cart
  /cart/get-cart-by-user:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a cart for a specific user based on the
        provided user ID.
      produces:
      - application/json
      responses:
        "200":
          description: Cart retrieved successfully
          schema:
            $ref: '#/definitions/delivery.CartResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get a cart by user ID
      tags:
      - Cart
  /cart/get-cart-item:
    get:
      consumes:
      - application/json
      description: Retrieves the details of a specific item in a cart based on the
        provided cart ID and product ID.
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Cart item details
          schema:
            $ref: '#/definitions/delivery.CartItem'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get a cart item by cart ID and product ID
      tags:
      - Cart
  /cart/update-cart:
    put:
      consumes:
      - application/json
      description: Updates the details of an existing cart based on the provided cart
        ID and request data.
      parameters:
      - description: Cart ID
        in: path
        name: id
        required: true
        type: string
      - description: Cart update request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateCartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart updated successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Update an existing cart
      tags:
      - Cart
  /cart/update-cart-item-quantity:
    put:
      consumes:
      - application/json
      description: Updates the quantity of a specific item in a cart based on the
        provided cart ID, product ID, and new quantity.
      parameters:
      - description: Cart ID
        in: path
        name: cart_id
        required: true
        type: string
      - description: Product ID
        in: path
        name: product_id
        required: true
        type: string
      - description: Update cart item quantity request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateCartItemQuantityRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Cart item quantity updated successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Cart item not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Update the quantity of a cart item
      tags:
      - Cart
  /office/create-office:
    post:
      consumes:
      - application/json
      description: Creates a new office based on the provided office details.
      parameters:
      - description: Create office request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.CreateOfficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Office created successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Create a new office
      tags:
      - Office
  /office/delete-office:
    delete:
      consumes:
      - application/json
      description: Deletes an office based on the provided office ID.
      parameters:
      - description: Delete office request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.DeleteOfficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Office deleted successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Delete an office
      tags:
      - Office
  /office/get-all-ofice:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all offices with optional pagination.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of all offices retrieved successfully
          schema:
            $ref: '#/definitions/delivery.GetAllOfficesResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get all offices
      tags:
      - Office
  /office/get-office:
    get:
      consumes:
      - application/json
      description: Retrieves details of an office based on the provided office ID.
      parameters:
      - description: Office ID
        in: path
        name: office_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Office details retrieved successfully
          schema:
            $ref: '#/definitions/delivery.OfficeResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get office details
      tags:
      - Office
  /office/update-office:
    put:
      consumes:
      - application/json
      description: Updates the details of an existing office based on the provided
        office ID and details.
      parameters:
      - description: Update office request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateOfficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Office updated successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Update an existing office
      tags:
      - Office
  /order/create-order:
    post:
      consumes:
      - application/json
      description: Creates a new order based on the provided order details.
      parameters:
      - description: Create order request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order created successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Create a new order
      tags:
      - Orders
  /order/get-order:
    get:
      consumes:
      - application/json
      description: Fetches details of an order based on the provided order ID.
      parameters:
      - description: Order ID
        in: path
        name: order_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order details retrieved successfully
          schema:
            $ref: '#/definitions/delivery.OrderResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get order details
      tags:
      - Orders
  /orders/delete-order:
    delete:
      consumes:
      - application/json
      description: Deletes an existing order based on the provided order ID.
      parameters:
      - description: Delete order request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.DeleteOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order deleted successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Delete an order
      tags:
      - Orders
  /orders/get-all-orders:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of all orders based on provided pagination
        details.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of orders per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/delivery.GetAllOrdersResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get all orders
      tags:
      - Orders
  /orders/get-order-by-client:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of orders for a specific client based
        on provided pagination details.
      parameters:
      - description: Client ID
        in: query
        name: client_id
        required: true
        type: string
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Number of orders per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Orders retrieved successfully
          schema:
            $ref: '#/definitions/delivery.GetOrderByClientResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get orders by client
      tags:
      - Orders
  /orders/update-order:
    put:
      consumes:
      - application/json
      description: Updates the details of an existing order based on the provided
        order ID and details.
      parameters:
      - description: Update order request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order updated successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Update an existing order
      tags:
      - Orders
  /product/create-product:
    post:
      consumes:
      - application/json
      description: Creates a new product based on the provided product details.
      parameters:
      - description: Create product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.CreateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product created successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Create a new product
      tags:
      - Product
  /product/delete-product:
    delete:
      consumes:
      - application/json
      description: Deletes a product based on the provided product ID.
      parameters:
      - description: Delete product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.DeleteProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product deleted successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Delete a product
      tags:
      - Product
  /product/get-all-products:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all products with optional pagination.
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Number of products per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Products retrieved successfully
          schema:
            $ref: '#/definitions/delivery.GetProductsResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get all products
      tags:
      - Product
  /product/get-product:
    get:
      consumes:
      - application/json
      description: Retrieves a product based on the provided product ID.
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Product retrieved successfully
          schema:
            $ref: '#/definitions/delivery.ProductResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "404":
          description: Product not found
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Get a product by ID
      tags:
      - Product
  /product/update-product:
    put:
      consumes:
      - application/json
      description: Updates an existing product based on the provided product details.
      parameters:
      - description: Update product request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/delivery.UpdateProductRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Product updated successfully
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/delivery.InfoResponse'
      security:
      - BearerAuth: []
      summary: Update an existing product
      tags:
      - Product
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
